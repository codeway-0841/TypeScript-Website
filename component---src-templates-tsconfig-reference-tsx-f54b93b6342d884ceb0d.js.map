{"version":3,"sources":["webpack://typescriptlang-org/./src/templates/tsconfigReference.tsx","webpack://typescriptlang-org/../shiki-twoslash/dist/dom.js"],"names":["TSConfigReferenceTemplateComponent","props","i","createInternational","useIntl","console","log","post","data","markdownRemark","JSON","stringify","useEffect","subnavLinks","document","querySelectorAll","forEach","link","addEventListener","event","preventDefault","target","querySelector","parentElement","scrollIntoView","behavior","block","updateSidebar","currentPossibleAnchor","fromTop","window","scrollY","section","hash","offsetTop","classList","add","remove","passive","capture","setupTwoslashHovers","removeEventListener","anchor","sectionName","prefixes","showCategories","categories","className","href","map","c","id","display","aria-labelledby","options","o","opt","index","indexOf","length","pageContext","root","filter","watch","typeAcq","skip","compilerOpts","includes","useState","openInfo","setOpenInfo","title","description","lang","locale","onClick","width","height","viewBox","fill","xmlns","d","stroke","intro","header","preview","dangerouslySetInnerHTML","__html","html","exports","resetHover","globalPopover","getElementById","style","getRootRect","element","nodeName","toLowerCase","getBoundingClientRect","hover","hovered","bodyRect","elemRect","message","getAttribute","position","body","top","left","tooltip","createElement","appendChild","txt","innerHTML","textContent","value","rootRect","relativeLeft","x","maxWidth","blocks","code"],"mappings":"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","file":"component---src-templates-tsconfig-reference-tsx-f54b93b6342d884ceb0d.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport { Layout } from \"../components/layout\"\n\nimport { useIntl } from \"react-intl\";\nimport { createInternational } from \"../lib/createInternational\"\nimport { Intl } from \"../components/Intl\"\nimport { headCopy } from \"../copy/en/head-seo\"\n\nimport \"./markdown.scss\"\nimport \"./tsconfig.scss\"\n\nimport { setupTwoslashHovers } from \"shiki-twoslash/dist/dom\"\n\ntype Category = { anchor: string, display: string, options: Array<{ anchor: string, name: string }> }\n\ntype Props = {\n  pageContext: {\n    categories: Category[],\n    tsconfigMDPath: string,\n    intro: {\n      html: string\n      header: string\n      preview: string\n    },\n    locale: string\n  },\n  data: GatsbyTypes.TSConfigReferenceTemplateQuery,\n  path: string\n}\n\nconst TSConfigReferenceTemplateComponent = (props: Props) => {\n  const i = createInternational<typeof headCopy>(useIntl())\n  console.log(props)\n  const post = props.data.markdownRemark\n  if (!post) {\n    console.log(\"Could not render:\", JSON.stringify(props))\n    return <div></div>\n  }\n\n  useEffect(() => {\n    // Overrides the anchor behavior to smooth scroll instead\n    // Came from https://css-tricks.com/sticky-smooth-active-nav/\n    const subnavLinks = document.querySelectorAll<HTMLAnchorElement>(\".tsconfig .tsconfig-quick-nav-category li a\");\n\n    subnavLinks.forEach(link => {\n      link.addEventListener(\"click\", event => {\n        event.preventDefault();\n\n        let target = document.querySelector(event.target![\"hash\"]) as HTMLElement;\n        if (target) target.parentElement!.parentElement!.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n      })\n    })\n\n    // Sets the current selection\n    const updateSidebar = () => {\n      const fromTop = window.scrollY;\n      let currentPossibleAnchor: HTMLAnchorElement | undefined\n\n      // Scroll down to find the highest anchor on the screen\n      subnavLinks.forEach(link => {\n        const section = document.querySelector<HTMLDivElement>(link.hash);\n        if (!section) { return }\n        const isBelow = section.offsetTop - 100 <= fromTop\n        if (isBelow) currentPossibleAnchor = link\n      });\n\n      // Then set the active tag\n      subnavLinks.forEach(link => {\n        if (link === currentPossibleAnchor) {\n          link.classList.add(\"current\");\n        } else {\n          link.classList.remove(\"current\");\n        }\n      })\n    }\n\n    // Handles setting the scroll \n    window.addEventListener(\"scroll\", updateSidebar, { passive: true, capture: true });\n    updateSidebar()\n    setupTwoslashHovers()\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateSidebar)\n    }\n  }, [])\n\n  const joiner = (options: any[], opt: any) => {\n    const index = options.indexOf(opt)\n    if (index === options.length -1) return null\n    return (index === options.length - 2) ?  (<span> and </span>): <span>, </span>\n  }\n\n  const anchor = (sectionName: string | undefined, anchor: string) => {\n    const prefixes = {\n      \"watchOptions\": \"watch\",\n      \"typeAcquisition\": \"type\"\n    }\n    if (!sectionName || !prefixes[sectionName]) return \"#\" + anchor\n    return `#${prefixes[sectionName]}-${anchor}`\n  }\n\n  const showCategories = (categories: Category[], sectionName?: string) => {\n    return <div className={sectionName ? \"tsconfig-quick-nav grouped\" : \"tsconfig-quick-nav\"}>\n      {sectionName ? <h4><code><a href={`#${sectionName}`}>\"{sectionName}\"</a></code></h4> : <div />}\n      {\n        categories.map(c => <div className=\"tsconfig-quick-nav-category\">\n          <h5 id={`quick-nav-${c.anchor}`}>{c.display}</h5>\n          <ol aria-labelledby={`quick-nav-${c.anchor}`}>\n            {c.options.map(o => <li><code><a href={anchor(sectionName, o.anchor)}>{o.anchor}</a>{joiner(c.options,o)}</code></li>)}\n          </ol>\n        </div>)\n      }\n    </div >\n  }\n  const categories = props.pageContext.categories\n\n  const root = categories.filter(c => c.anchor === \"Top Level\")\n  const watch = categories.filter(c => c.anchor === \"watchOptions\")\n  const typeAcq = categories.filter(c => c.anchor === \"typeAcquisition\")\n  const skip = [\"Top Level\", \"watchOptions\", \"typeAcquisition\"]\n  const compilerOpts = categories.filter(c => !skip.includes(c.anchor))\n\n  const [openInfo, setOpenInfo] = useState(false)\n  const toggleInfoState = () => setOpenInfo(!openInfo)\n\n\n  return (\n    <Layout title={i(\"tsconfig_title\")} description={i(\"tsconfig_description\")} lang={props.pageContext.locale}>\n\n      <div className={`tsconfig raised main-content-block markdown button ${openInfo ? \"open\" : \"closed\"}`} >\n        <a href=\"#\" onClick={toggleInfoState}>\n          <h2>\n            <svg width=\"22\" height=\"13\" viewBox=\"0 0 22 13\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M0.5 1L11 11.5L21.5 1\" stroke=\"black\" />\n            </svg>\n            {props.pageContext.intro.header}</h2>\n          {!openInfo && <div className=\"preview\">{props.pageContext.intro.preview}</div>}\n        </a>\n\n        {openInfo && <div className=\"content\">  <div dangerouslySetInnerHTML={{ __html: props.pageContext.intro.html }} /></div>}\n      </div>\n\n      <div className=\"tsconfig main-content-block\">\n        <h2>Compiler Options</h2>\n        {showCategories(root)}\n        {showCategories(compilerOpts, \"compilerOptions\")}\n        {showCategories(watch, \"watchOptions\")}\n        {showCategories(typeAcq, \"typeAcquisition\")}\n      </div>\n\n\n      <div dangerouslySetInnerHTML={{ __html: post.html! }} />\n\n    </Layout >\n  )\n}\n\n\nexport const pageQuery = graphql`\nquery TSConfigReferenceTemplate($tsconfigMDPath: String!) {\n\n  markdownRemark(fileAbsolutePath: {eq: $tsconfigMDPath} ) {\n    id\n    html\n    frontmatter {\n      permalink\n    }\n  }\n}\n`\n\n\nexport default (props: Props) => <Intl locale={props.pageContext.locale}><TSConfigReferenceTemplateComponent {...props} /></Intl>\n","\"use strict\";\nexports.__esModule = true;\nexports.setupTwoslashHovers = void 0;\n// Gets the position of an element relative to the whole page\nvar getAbsoluteElementPos = function (element) {\n    var bodyRect = document.body.getBoundingClientRect();\n    var elemRect = element.getBoundingClientRect();\n    var top = elemRect.top - bodyRect.top;\n    var left = elemRect.left - bodyRect.left;\n    return {\n        top: top,\n        left: left\n    };\n};\n// Hide it\nvar resetHover = function () {\n    var globalPopover = document.getElementById(\"twoslash-mouse-hover-info\");\n    if (globalPopover)\n        globalPopover.style.display = \"none\";\n};\n// Get it\nvar findOrCreateTooltip = function () {\n    var globalPopover = document.getElementById(\"twoslash-mouse-hover-info\");\n    if (!globalPopover) {\n        globalPopover = document.createElement(\"div\");\n        globalPopover.style.position = \"absolute\";\n        globalPopover.id = \"twoslash-mouse-hover-info\";\n        document.body.appendChild(globalPopover);\n    }\n    return globalPopover;\n};\nvar getRootRect = function (element) {\n    if (element.nodeName.toLowerCase() === \"pre\") {\n        return element.getBoundingClientRect();\n    }\n    return getRootRect(element.parentElement);\n};\n// Gets triggered on the spans inside the codeblocks\nvar hover = function (event) {\n    var hovered = event.target;\n    if (hovered.nodeName !== \"DATA-LSP\")\n        return resetHover();\n    var message = hovered.getAttribute(\"lsp\");\n    var position = getAbsoluteElementPos(hovered);\n    // Create or re-use the current hover div\n    var tooltip = findOrCreateTooltip();\n    // Use a textarea to un-htmlencode for presenting to the user\n    var txt = document.createElement(\"textarea\");\n    txt.innerHTML = message;\n    tooltip.textContent = txt.value;\n    // Offset it a bit from the mouse and present it at an absolute position\n    var yOffset = 20;\n    tooltip.style.display = \"block\";\n    tooltip.style.top = position.top + yOffset + \"px\";\n    tooltip.style.left = position.left + \"px\";\n    // limit the width of the tooltip to the outer container (pre)\n    var rootRect = getRootRect(hovered);\n    var relativeLeft = position.left - rootRect.x;\n    tooltip.style.maxWidth = rootRect.width - relativeLeft + \"px\";\n};\n/**\n * Creates the main mouse over popup for LSP info using the DOM API.\n * It is expected to be run inside a `useEffect` block inside your main\n * exported component in Gatsby.\n *\n * @example\n * import React, { useEffect } from \"react\"\n * import { setupTwoslashHovers } from \"shiki-twoslash/dom\";\n *\n * export default () => {\n *   // Add a the hovers\n *   useEffect(setupTwoslashHovers)\n *\n *   // Normal JSX\n *   return </>\n * }\n *\n */\nvar setupTwoslashHovers = function () {\n    var blocks = document.querySelectorAll(\".shiki.lsp .code-container code\");\n    blocks.forEach(function (code) {\n        code.addEventListener(\"mouseover\", hover);\n        code.addEventListener(\"mouseout\", resetHover);\n    });\n    return function () {\n        blocks.forEach(function (code) {\n            code.removeEventListener(\"mouseover\", hover);\n            code.removeEventListener(\"mouseout\", resetHover);\n        });\n    };\n};\nexports.setupTwoslashHovers = setupTwoslashHovers;\n"],"sourceRoot":""}